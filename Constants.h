#pragma once
#include <string>
#include <vector>
#include <map>


//create quries
#define CREATE_TABLE_USERS "CREATE TABLE IF NOT EXISTS USERS(ID INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL, NAME TEXT NOT NULL);"
#define CREATE_TABLE_ALBUMS "CREATE TABLE IF NOT EXISTS ALBUMS (ID INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL, NAME TEXT NOT NULL, USER_ID INTEGER NOT NULL, CREATION_DATE TEXT NOT NULL, FOREIGN KEY(USER_ID) REFERENCES USERS(ID));"
#define CREATE_TABLE_PICTURES "CREATE TABLE IF NOT EXISTS PICTURES (ID  INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, NAME TEXT  NOT NULL, LOCATION TEXT NOT NULL, CREATION_DATE TEXT NOT NULL, ALBUM_ID INTEGER NOT NULL, FOREIGN KEY(ALBUM_ID) REFERENCES ALBUMS(ID));"
#define CREATE_TABLE_TAGS "CREATE TABLE IF NOT EXISTS TAGS (ID  INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, PICTURE_ID INTEGER NOT NULL, USER_ID INTEGER NOT NULL, FOREIGN KEY(PICTURE_ID) REFERENCES PICTURES(ID), FOREIGN KEY(USER_ID) REFERENCES USERS(ID));"

//transactions
#define BEGIN_TRANS "BEGIN TRANSACTION"
#define END_TRANS "COMMIT TRANSACTION"
#define ROLL "ROLLBACK"

//endings
#define ENDING ";"
#define ENDING_STR "';"
#define ENDING_QUERY ");"
#define ENDING_QUERY_STR "');"

//delete
#define DELETE_FROM_TABLE(tableName, parm) "DELETE FROM " tableName " WHERE " parm " = "
#define DELETE_FROM_TAGS "DELETE FROM TAGS WHERE TAGS.PICTURE_ID = "

//big queries
#define PICTURES_ALBUMS "SELECT PICTURES.* FROM PICTURES JOIN ALBUMS ON PICTURES.ALBUM_ID = ALBUMS.ID WHERE ALBUMS.NAME = '"
#define PICTURES_TAGS "SELECT * FROM PICTURES JOIN TAGS ON PICTURES.ID = TAGS.PICTURE_ID WHERE TAGS.USER_ID = "
#define COUNT_ALBUMS_QUERY "SELECT COUNT(*) FROM (SELECT DISTINCT ALBUMS.ID FROM ALBUMS JOIN PICTURES ON ALBUMS.ID = PICTURES.ALBUM_ID JOIN TAGS ON PICTURES.ID = TAGS.PICTURE_ID WHERE TAGS.USER_ID = "
#define TAGED_PICTURES_QUERY "SELECT * FROM PICTURES WHERE ID = (SELECT PICTURES.ID FROM PICTURES JOIN TAGS ON PICTURES.ID = TAGS.PICTURE_ID GROUP BY PICTURES.ID ORDER BY COUNT(TAGS.USER_ID) DESC LIMIT 1);"
#define PICTURE_ID_QUERY(pictureName, albumName) "(SELECT PICTURES.ID FROM PICTURES WHERE PICTURES.NAME = '" + pictureName + "' AND PICTURES.ALBUM_ID = (SELECT ALBUMS.ID FROM ALBUMS WHERE ALBUMS.NAME = '" + albumName + "'))"
#define INSERT_INTO_TABLE(table, columns) "INSERT INTO " table " (" columns ") VALUES ("
#define MAX_ID(table) "SELECT MAX(ID) FROM " + table + ";"

//parms for insert
#define PARMS_PIC "NAME, LOCATION, CREATION_DATE, ALBUM_ID"
#define PARMS_ALBUM "NAME, USER_ID, CREATION_DATE"
#define PARMS_USER "ID, NAME"
#define PARMS_TAG "USER_ID, PICTURE_ID"

//add parms
#define TAG_PARM " AND TAGS.USER_ID = '"
#define USER_ID_PARM "' AND USER_ID = "
#define ALBUM_PARM "' AND ALBUMS.USER_ID = "
#define NAME_PARM " AND NAME = '"
#define AND_PARM ", '"
#define AND_PARM_CLEAN ", "
#define STR_PARM "'"
#define AND_PARM_STR_FULL "', '"
#define AND_PARM_STR "', "

//table names
#define USERS_COLUNM "USERS"
#define ALBUMS_COLUNM "ALBUMS"
#define TAGS_COLUNM "TAGS"
#define PICTURES_COLUNM "PICTURES"
#define MAX_ID_COLUNM "MAX(ID)"
#define ID_COLUNM "ID"
#define NAME_COLUNM "NAME"
#define USER_ID_COLUNM "USER_ID"
#define ALBUM_ID_COLUNM "ALBUM_ID"
#define LOCATION_COLUNM "LOCATION"
#define CREATION_DATE_COLUNM "CREATION_DATE"
#define NULL_COLUNM "NULL"
#define PICTURE_ID_COLUNM "PICTURE_ID"

//small queries
#define ALBUMS_QUERY "SELECT * FROM ALBUMS;"
#define USERS_QUERY "SELECT * FROM USERS;"
#define ALBUMS_QUERY_NAME "SELECT * FROM ALBUMS WHERE NAME = '"
#define QUERY_PARM(table, parm) "SELECT * FROM " table " WHERE " parm " = "

enum CommandType
{
	HELP = 0,
	// Album operations
	CREATE_ALBUM = 1,
	OPEN_ALBUM,
	CLOSE_ALBUM,
	DELETE_ALBUM,
	LIST_ALBUMS,
	LIST_ALBUMS_OF_USER,

	// Picture operations
	ADD_PICTURE,
	REMOVE_PICTURE,
	SHOW_PICTURE,
	LIST_PICTURES,
	TAG_USER,
	UNTAG_USER,
	LIST_TAGS,

	// User operations
	ADD_USER,
	REMOVE_USER,
	LIST_OF_USER,
	USER_STATISTICS,
	

	TOP_TAGGED_USER,
	TOP_TAGGED_PICTURE,
	PICTURES_TAGGED_USER,

	//Bonus
	SET_READONLY,
	UNSET_READONLY,

	
	EXIT = 99
};

struct CommandPrompt {
	CommandType type;
	const std::string prompt;
};

struct CommandGroup {
	const std::string title;
	const std::vector<struct CommandPrompt> commands;
};